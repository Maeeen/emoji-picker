import { Palette, Button, ListView, VerticalBox, ScrollView } from "std-widgets.slint";
import { EmojiModel, EmojiGroupModel } from "emoji-model.slint";

component GroupLine inherits VerticalLayout {
    alignment: center;
    in property <color> color;

    Rectangle {
        height: 1px;
        background: color;
    }
}

component GroupTitle inherits Rectangle {
    in property <string> title: "Placeholder";
    width: 100%;
    height: 30px;

    HorizontalLayout {
        padding: 5px;
        spacing: 10px;
        Text {
            vertical-alignment: center;
            horizontal-alignment: left;
            text: title;
        }

        GroupLine {
            color: Palette.border;
        }
    }
}

component EmojiButton inherits Button {
    in property <EmojiModel> emoji;
    in property <int> skin-tone;
    callback emoji-selected(string);

    icon: 
        emoji.skin-tones.length > skin-tone && emoji.skin-tones.length > 0 ? emoji.skin-tones[skin-tone].image : emoji.image;
    private property <string> code: 
        emoji.skin-tones.length > skin-tone && emoji.skin-tones.length > 0 ? emoji.skin-tones[skin-tone].code : emoji.code;

    clicked => {
        emoji-selected(code);
    }
}

component EmojiButtons inherits Rectangle {
    in property <int> skin-tone;
    in-out property <[EmojiModel]> emojis;
    callback emoji-selected(string);

    private property <length> button_width: 50px;
    private property <length> button_height: 40px;

    // How many emoji per row
    private property <int> columns: floor(root.width / button_width);

    // How many rows
    private property <int> rows: ceil(emojis.length / columns);

    height: rows * button_height;
    width: 100%;

    for emoji[index] in emojis: EmojiButton {
        x: mod(index, columns) * button_width;
        y: floor(index / columns) * button_height;
        width: button_width;
        height: button_height;
        skin-tone: skin-tone;
        emoji: emoji;
        emoji-selected(e) => {
            emoji-selected(e);
        }
    }
}

component EmojiGroup {
    in property <string> title: "Placeholder title";
    in property <EmojiGroupModel> emojis;
    in property <int> skin-tone;

    callback emoji-selected(string);

    VerticalLayout {
        if emojis.emojis.length > 0: GroupTitle {
            title: title;
        }
        if emojis.emojis.length > 0: EmojiButtons {
            emojis: emojis.emojis;
            skin-tone: skin-tone;
            emoji-selected(e) => {
                emoji-selected(e);
            }
        }
    }
}

component EmojiTabButton {
    in property <image> icon;
    in property <length> current-group-y;
    in property <length> current-y;
    in property <length> next-group-y;
    callback clicked();

    private property <bool> is-active: current-group-y <= current-y && current-y < next-group-y;

    height: 30px;

    TouchArea {
        Rectangle {
            background: is-active ? Palette.accent-background : Palette.control-background;
            border-radius: 4px;
            clip: true;

            Image {
                source: icon;
                width: 20px;
                height: 20px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        clicked => {
            clicked();
        }
    }
}

component EmojiTabs inherits HorizontalLayout {
    in property <[EmojiGroupModel]> groups;
    in property <length> scrolled-y;

    pure callback y-for-group(int) -> length;
    callback scroll-requested(int);

    for group[idx] in groups: EmojiTabButton {
        icon: group.image;
        current-group-y: y-for-group(idx);
        current-y: scrolled-y;
        next-group-y: y-for-group(idx + 1);
        clicked => {
            scroll-requested(idx);
        }
    }
}

export component EmojiGroupList {
    in property <int> skin-tone;

    in property <[EmojiGroupModel]> groups;
    // This is really more a workaround than a solution
    callback emoji-selected(string);
    callback reset-scroll();

    // Sadly this is a limitation but it's impossible to get
    // the y position of elements inside a ScrollView
    function y-for-group(idx: int) -> length {
        if idx < 0 { return -1px; }
        else if idx == 0 { return g0.y; }
        else if (idx == 1) { return g1.y; }
        else if (idx == 2) { return g2.y; }
        else if (idx == 3) { return g3.y; }
        else if (idx == 4) { return g4.y; }
        else if (idx == 5) { return g5.y; }
        else if (idx == 6) { return g6.y; }
        else if (idx == 7) { return g7.y; }
        else if (idx == 8) { return g8.y; }
        else { return g8.y + g8.height; }
    }

    reset-scroll() => {
        s.viewport-y = 0;
    }

    VerticalLayout {
        EmojiTabs {
            groups: groups;
            scrolled-y: -s.viewport-y;
            y-for-group(idx) => {
                return y-for-group(idx);
            }
            scroll-requested(idx) => {
                s.viewport-y = -y-for-group(idx)
            }
        }

        s := ScrollView {
            VerticalLayout {
                g0 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[0].title;
                    emojis: groups[0];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g1 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[1].title;
                    emojis: groups[1];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g2 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[2].title;
                    emojis: groups[2];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g3 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[3].title;
                    emojis: groups[3];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g4 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[4].title;
                    emojis: groups[4];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g5 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[5].title;
                    emojis: groups[5];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g6 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[6].title;
                    emojis: groups[6];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g7 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[7].title;
                    emojis: groups[7];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }

                g8 := EmojiGroup {
                    skin-tone: skin-tone;
                    title: groups[8].title;
                    emojis: groups[8];
                    emoji-selected(e) => {
                        emoji-selected(e);
                    }
                }
            }
        }
    }
}
